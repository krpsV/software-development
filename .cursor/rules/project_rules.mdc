---
description: 
globs: 
alwaysApply: true
---
以下のルールに従って、ソフトウェア制作 プロジェクトを進めてください。

## セッション開始時のルール
- 新しいセッションを開始する際は、まず `README.md` を確認し、プロジェクトの現状とセットアップ手順を把握してください。

## 言語 / 実行環境
- Java

## プロジェクト概要
- ソフトウェア制作は、ネットワークプログラミングに関する知識を実体験を通して習得することを目的とした学習プロジェクトです。
- 現在の実装課題：Jabber（Java ベースのクライアント・サーバー型ソケット通信システム）
- TCP プロトコルを使用してクライアントとサーバー間でメッセージのやり取りを行い、**複数のクライアントが同時に接続可能**なマルチスレッド対応サーバーを実装します。

## 学習目標
- **ネットワークプログラミング基礎知識の習得**:
  - IPアドレス、ポート番号の理解と実装
  - ソケットプログラミングの実践
  - TCP/IP通信プロトコルの理解
- **Javaネットワークプログラミングの体験**:
  - ServerSocket, Socket クラスの使用
  - マルチスレッドプログラミング
  - 例外処理とリソース管理
- **プロジェクト管理スキルの習得**:
  - 自主的な計画立案とゴール設定
  - スケジュール管理と進捗確認
  - 発表資料の作成と成果発表

## 開発ワークフロー
一つの機能開発やタスクが完了するたびに、以下の手順を **必ず** 実施します。

1.  **リファクタリング**:
    -   作成または変更したコードをリファクタリングし、品質を向上させます。
2.  **ドキュメンテーション更新**:
    -   プロジェクトの現在の状態を正確に反映するように `README.md` を更新します。これには、新機能の使い方やプロジェクト構造の変更点などが含まれます。
3.  **学習記録**:
    -   実装を通して学んだネットワークプログラミングの知識や気づきを記録します。
4.  **バージョン管理**:
    -   ここまでの変更内容（コード、ドキュメントなど）をまとめて Git にコミットします。コミットメッセージは変更内容が分かりやすいように記述します。

---

### その他のルール

-   **コマンド実行**:
    -   繰り返し実行するコマンドや、複雑なセットアップを伴うコマンドは、再現性を確保するためにシェルスクリプト（`.sh` ファイル）として作成し、`scripts` フォルダに保存してください。
    -   `git commit` のような一度きりの単純なコマンドは、スクリプト化せず、直接実行してください。
-   **Java 環境 / 開発**:
    -   Javaソースファイルは `src/bootcamp/` ディレクトリに配置してください。
    -   コンパイル済みクラスファイルは `bin/` ディレクトリに出力してください。
    -   コンパイル時は `javac -d bin src/bootcamp/*.java` を使用してください。
    -   実行時は `java -cp bin クラス名` を使用してください。
-   **プロジェクト構成**:
    -   メインのソースファイル: `src/bootcamp/JabberServer.java`, `src/bootcamp/JabberClient.java`
    -   実行用スクリプト: `run.sh` (単一クライアント), `run_multi_client_test.sh` (複数クライアント)
    -   ユーティリティスクリプト: `scripts/client_prompt.sh`
    -   tmux を使用したマルチペイン開発環境
-   **テスト / 起動**:
    -   単一クライアントテスト: `./run.sh [ポート番号]`
    -   複数クライアントテスト: `./run_multi_client_test.sh [ポート番号] [クライアント数]`
    -   手動コンパイル・実行も可能
-   **学習記録 / ドキュメンテーション**:
    -   実装過程で学んだネットワークプログラミングの概念と技術的知見を記録
    -   ソケット通信、マルチスレッド処理、例外処理などの理解度を文書化
    -   実装上の課題と解決策を記録し、学習の振り返りを行う
-   **課題要件**:
    -   自分で計画を立てて、ゴール設定をする
    -   ゴールまでのスケジュールを立案する
    -   発表資料としてまとめる
    -   他の学生の課題と比較検討する
-   **プロジェクト管理**:
    -   定期的な進捗確認と計画見直し
    -   実装したフィーチャーごとの動作確認とテスト
    -   学習目標達成度の自己評価
-   **ルール更新**:
    -   このルールは、対話を通して適宜更新してください。`./.cursor/rules/project_rules.mdc` ファイルに保存されています。 
